<snippet>
    <content><![CDATA[
/****
  ** Time Complexity : O(V + E * LogV)
  ** Space Complexity : O(V + E)
****/

typedef vector<vector<pii>> graph;
const int INF = LLONG_MAX - 2 * INT_MAX;

struct node
{
    int par;
    int cost = INF;

    friend bool operator <(const node &lhs, const node &rhs)
    {
        if(lhs.cost == rhs.cost)
            return lhs.par < rhs.par;
        return lhs.cost < rhs.cost;
    }
};

string to_string(const node &a)
{
    #ifdef DEBUG
        return to_string(make_pair(a.par, a.cost));
    #endif
        return "";
}

void add_edge(graph &a, int u, int v, int w, bool dir = false)
{
    a[u].push_back({v, w});
    if(!dir)
        a[v].push_back({u, w});
}

graph adj;
priority_queue<pii, vector<pii>, greater<pii>> pq;
vector<node> sssp;

int sssp_dijkstra(int root = 1, int dest = -1)
{
    int n = adj.size() - 1;
 
    sssp[root] = {root, 0};
    pq.push({0, root});
    
    while(!pq.empty())
    {
        auto p = pq.top();
        int u = p.ss;
        pq.pop();

        if(u == dest)
            return sssp[u].cost;

        if(p.ff != sssp[u].cost)
            continue;

        for(auto v : adj[u])
        {
            int dist = sssp[u].cost + v.ss;
            if(dist < sssp[v.ff].cost)
            {
                sssp[v.ff] = {u, dist};
                pq.push({dist, v.ff});
            }
        }
    }
    
    return ~dest ? return sssp[dest].cost : return INF;
}

void clearAll(int n)
{
    adj.clear();
    adj.resize(n + 1);
    sssp.clear();
    sssp.resize(n + 1);
    pq = priority_queue<pii, vector<pii>, greater<pii>>();
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>cdijkstra</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>
