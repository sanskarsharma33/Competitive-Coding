<snippet>
	<content><![CDATA[
#define ris return *this
#define sim template<typename U
#define sor , typename G
#define dor > inline ostream& operator << (ostream& out, 

sim>U inverse(U a,U m){U u=0,v=1,t;while(a!=0){t=m/a;m-=t*a;swap(a,m);u-=t*v;swap(u,v);}assert(m==1);return u;}
template<typename T>
class Modular
{
  public:
    using Type=typename decay<decltype(T::value)>::type;

    constexpr Modular():value(){}
    sim>Modular(const U &x){value=normalize(x);}

    sim>static Type normalize(const U &x){Type mod=__mod();if(__mod()<=x && x<mod)return static_cast<Type>(x);
    Type v=static_cast<Type>(x%mod);if(v<0)v+=mod;return v;}

    const Type& operator()() const{return value;}
    sim>explicit operator U() const{return static_cast<U>(value);}
    constexpr static Type __mod(){return T::value;}

    Modular& operator +=(const Modular& rhs){Type mod=__mod();if((value+=rhs.value)>=mod)value-=mod;ris;}
    Modular& operator -=(const Modular& rhs){Type mod=__mod();if((value-=rhs.value)>=mod)value+=mod;ris;}
    sim>Modular& operator +=(const U &rhs){ris+=Modular(rhs);}
    sim>Modular& operator -=(const U &rhs){ris-=Modular(rhs);}
    Modular& operator++(){ris+=1;}
    Modular& operator--(){ris-=1;}
    Modular operator++(int){Modular result(*this);*this+=1;return result;}
    Modular operator--(int){Modular result(*this);*this-=1;return result;}
    Modular operator-() const{return Modular(-value);}

    sim=T>typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular &rhs)
    {
        #ifdef _WIN32
            uint64_t x=static_cast<int64_t>(value)*static_cast<int64_t>(rhs.value);
            uint32_t xh=static_cast<uint32_t>(x>>32),x1=static_cast<uint32_t>(x),d,m;
            asm("divl %4; \n\t":"=a"(d),"=d"(m):"d"(xh),"a"(x1),"r"(__mod()));
            value=m;
        #else
            value=normalize(value*rhs.value-q*__mod());
        #endif 
        ris;
    }

    sim=T>typename enable_if<is_same<typename Modular<U>::Type, int64_t>::value, Modular>::type& operator
    *=(const Modular &rhs){int64_t q=static_cast<int64_t>(static_cast<long double>(value)*rhs.value/__mod());
    value=normalize(value*rhs.value-q*__mod());ris;}

    sim=T>typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator
    *=(const Modular &rhs){value=normalize(value*rhs.value);ris;}

    Modular& operator /=(const Modular &rhs){ris*=Modular(inverse(rhs.value,__mod()));}
    sim>friend const Modular<U> &abs(const Modular<U> &v){return v;}
    
    sim>friend bool operator ==(const Modular<U> &lhs,const Modular<U> &rhs);
    sim>friend bool operator <(const Modular<U> &lhs,const Modular<U> &rhs);
    sim>friend istream& operator>>(istream &in,Modular<U> &rhs);

  private:
    Type value;
};

sim>bool operator ==(const Modular<U> &lhs,const Modular<U> &rhs){return lhs.value==rhs.value;}
sim sor>bool operator ==(const Modular<U> &lhs,G rhs){return lhs==Modular<G>(rhs);}
sim sor>bool operator ==(G lhs,const Modular<U> &rhs){return rhs==Modular<U>(lhs);}

sim>bool operator !=(const Modular<U> &lhs,const Modular<U> &rhs){return !(lhs==rhs);}
sim sor>bool operator !=(const Modular<U> &lhs,G rhs){return !(lhs==rhs);}
sim sor>bool operator !=(G lhs,const Modular<U> &rhs){return !(lhs==rhs);}

sim>bool operator <(const Modular<U> &lhs,const Modular<U> &rhs){return lhs.value<rhs.value;}

sim>Modular<U> operator +(const Modular<U> &lhs,const Modular<U> &rhs){return Modular<U>(lhs)+=rhs;}
sim sor>Modular<U> operator +(const Modular<U>& lhs,G rhs){return Modular<U>(lhs)+=rhs;}
sim sor> Modular<U> operator +(G lhs,const Modular<U>& rhs){return Modular<U>(lhs)+=rhs;}

sim>Modular<U> operator -(const Modular<U>& lhs,const Modular<U>& rhs){return Modular<U>(lhs)-=rhs;}
sim sor>Modular<U> operator -(const Modular<U>& lhs,G rhs){return Modular<U>(lhs)-=rhs;}
sim sor>Modular<U> operator -(G lhs,const Modular<U>& rhs){return Modular<U>(lhs)-=rhs;}
 
sim>Modular<U> operator *(const Modular<U>& lhs,const Modular<U>& rhs){return Modular<U>(lhs)*=rhs;}
sim sor>Modular<U> operator *(const Modular<U>& lhs,G rhs){return Modular<U>(lhs)*=rhs;}
sim sor>Modular<U> operator *(G lhs,const Modular<U>& rhs){return Modular<U>(lhs)*=rhs;}
 
sim>Modular<U> operator /(const Modular<U>& lhs,const Modular<U>& rhs){return Modular<U>(lhs)/=rhs;}
sim sor>Modular<U> operator /(const Modular<U>& lhs,G rhs){return Modular<U>(lhs)/=rhs;}
sim sor>Modular<U> operator /(G lhs,const Modular<U>& rhs){return Modular<U>(lhs)/=rhs;}

sim sor>Modular<U>power(const Modular<U>& a,const G& b){assert(b>=0);Modular<U> x=a,res=1;
G p=b;while(p>0){if(p&1)res*=x;x*=x;p>>=1;}return res;}
 
sim>bool IsZero(const Modular<U>& num){return num()==0;}
sim>string to_string(const Modular<U> &num){return to_string(num());}
sim dor const Modular<U> &num){return out<<num();}
sim>istream& operator>>(istream &in,Modular<U> &n){
typename common_type<typename Modular<U>::Type,int64_t>::type x;in>>x;n.value=Modular<U>::normalize(x);return in;}

using ModType = ${1:int};
struct VarMod{static ModType value;};
ModType VarMod::value;
${2:ModType& MOD=VarMod::value;}
using Mint=Modular<VarMod>;

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cmodularint</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
