<snippet>
    <content><![CDATA[
class matrix
{

public:
    vector<vector<ll>> mat;
    int row, col;

    matrix(int n, int m, ll val=1)
    {
        mat.assign(n, vector<ll>(m, 0));
        
        for(int i = 0; i < n; i++)
            mat[i][i] = val;

        row = n;
        col = m;
    }

    matrix(const vector<vector<ll>> &a, ll except=0)
    {
        row = a.size();
        size_t maxi = 0;
        for(int i = 0; i < row; i++)
            maxi=max(maxi,a[i].size());
        col = maxi;

        mat.assign(row, vector<ll>(col, except));

        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < a[i].size(); j++)
                mat[i][j]=a[i][j];
        }
    }

    friend matrix operator *(const matrix &lhs, const matrix &rhs)
    {
        assert(lhs.col == rhs.row);
        matrix ans(lhs.row, rhs.col);
        Mint total, a, b;
        
        for(int i = 0; i < lhs.row; i++)
        {
            for(int j = 0; j < rhs.col; j++)
            {
                total = 0;
                for(int k = 0; k < lhs.col; k++)
                {
                    a = lhs.mat[i][k];
                    b = rhs.mat[k][j];
                    total += a * b;
                }
                ans.mat[i][j] = total;
            }
        }
        return ans;
    }

    friend matrix operator *=(matrix &lhs, const matrix &rhs)
    {
        return lhs = lhs * rhs;
    }
}

string to_string(const matrix &a)
{
    #ifdef DEBUG
        return to_string(a.mat);
    #endif

    return "";
}

void power(matrix &m, ll n)
{
    assert(m.row == m.col);
    matrix ans(m.row, m.col);

    while(n > 0)
    {
        if(n&1)
            ans *= m;
        m *= m;
        n>>=1;
    }
    m = ans;
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>cmatrix</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>