<snippet>
    <content><![CDATA[
// $1
#if __has_include("debug.h")
    #include "debug.h"
#else
    #include<bits/stdc++.h>
    using namespace std;

    #define p(str) 7
    #define o(str) 42
    #define fundri 108
    #define debug(...) 1729
#endif

#define int long long
typedef pair<int,int> pii;
typedef vector<int> vi;

const bool testcases = $2;
#define ff first
#define ss second
#define endl '\n'
#define all(s) s.begin(), s.end()
#define fast ios_base::sync_with_stdio(false);cin.tie(nullptr)

// if vector isn't soted then it will remove consecutive same elements
#define make_unique(vec) vec.erase(unique(all(vec)), vec.end())
#define test int TC = 1;if(testcases)cin >> TC;for(int tc = 1 ; tc <= TC ; tc++)
#define sort_by(cont,expr) sort(all(cont),[&](const auto &lhs,const auto &rhs){return expr;})

int seed;mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
inline int rnd(int l=0,int r=INT_MAX){return uniform_int_distribution<int>(l,r)(rng);}

template<typename T>bool isPrime(T n){for(T i=2;i*i<=n;i++)if(n%i==0)return 0;return 1;}
template<typename T>inline bool in_range(T a,T l,T r){return (a>=l&&a<=r);}
template<typename T, typename U>inline istream& operator >>(istream& in, pair<T, U> &a){in >> a.ff >> a.ss;return in;}
template<typename T>inline istream& operator >>(istream& in, vector<T> &a){for(auto &x : a)in >> x;return in;}

int32_t main(int32_t argc, char **argv)
{
    #ifdef DHRUV_GHEEWALA
        std::chrono::time_point<std::chrono::high_resolution_clock> start_time, end_time;
        start_time = std::chrono::high_resolution_clock::now();

        freopen("INPUT.txt","r",stdin);
        freopen("OUTPUT.txt","w",stdout);
        freopen("DEBUG.txt","w",stderr);
    #endif

    fast;
    ${3://variables}
    test
    {
        $4

        fundri;
    }

    #ifdef DHRUV_GHEEWALA
        end_time = std::chrono::high_resolution_clock::now();
        int elapsed_time = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count();
        cerr << endl << endl;
        cerr << "Elapsed Time: " << elapsed_time << " ms" << endl;
    #endif

    return 0;
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>cbasic</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>
